define double @julia_getWnofast_21457(double, double) {
top:
  %2 = fcmp ugt double %0, -2.000000e-02
  br i1 %2, label %L, label %if

if:                                               ; preds = %top
  %3 = fmul double %0, %0
  %4 = fadd double %3, -1.000000e+00
  %5 = call double inttoptr (i64 13106737968 to double (double)*)(double inreg %4)
  %6 = fcmp ord double %5, 0.000000e+00
  %7 = fcmp uno double %4, 0.000000e+00
  %8 = or i1 %6, %7
  br i1 %8, label %pass12, label %fail11

fail11:                                           ; preds = %if
  %9 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %9, i32 27)
  unreachable

pass12:                                           ; preds = %if
  %10 = fsub double 2.000000e+00, %3
  %11 = fdiv double 1.000000e+00, %10
  %12 = fcmp uge double %11, 0.000000e+00
  br i1 %12, label %pass14, label %fail13

fail13:                                           ; preds = %pass12
  %13 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %13, i32 31)
  unreachable

pass14:                                           ; preds = %pass12
  %14 = fsub double 0x401921FB54442D18, %5
  %15 = fadd double %14, %1
  %16 = call double @llvm.sqrt.f64(double %11)
  %17 = fmul double %15, %16
  %18 = fsub double %17, %0
  %19 = fmul double %11, %18
  br label %L39

L:                                                ; preds = %top
  %20 = fadd double %1, 0x3FF64EB2E160837B
  %notlhs = fcmp ult double %0, 2.000000e-02
  %notrhs = fcmp ule double %20, %0
  %21 = or i1 %notrhs, %notlhs
  br i1 %21, label %L21, label %if15

if15:                                             ; preds = %L
  %22 = fmul double %0, %0
  %23 = fadd double %22, -1.000000e+00
  %24 = call double inttoptr (i64 13106737968 to double (double)*)(double inreg %23)
  %25 = fcmp ord double %24, 0.000000e+00
  %26 = fcmp uno double %23, 0.000000e+00
  %27 = or i1 %25, %26
  br i1 %27, label %pass17, label %fail16

fail16:                                           ; preds = %if15
  %28 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %28, i32 34)
  unreachable

pass17:                                           ; preds = %if15
  %29 = fsub double 2.000000e+00, %22
  %30 = fdiv double 1.000000e+00, %29
  %31 = fcmp uge double %30, 0.000000e+00
  br i1 %31, label %pass19, label %fail18

fail18:                                           ; preds = %pass17
  %32 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %32, i32 38)
  unreachable

pass19:                                           ; preds = %pass17
  %33 = fadd double %24, %1
  %34 = call double @llvm.sqrt.f64(double %30)
  %35 = fmul double %33, %34
  %36 = fsub double %35, %0
  %37 = fmul double %30, %36
  br label %L39

L21:                                              ; preds = %L
  %38 = fcmp uge double %0, 2.000000e-02
  br i1 %38, label %L24, label %if22

if22:                                             ; preds = %L21
  %39 = fadd double %1, 0x400921FB54442D18
  %40 = fmul double %0, %0
  %41 = fmul double %40, %0
  %42 = fmul double %40, %40
  %43 = fmul double %42, %0
  %44 = fmul double %41, %41
  %45 = fmul double %40, %43
  %46 = fmul double %42, %42
  %47 = fmul double %39, 0x3FD6A09E667F3BCD
  %48 = fsub double %47, %0
  %49 = fmul double %39, 0x3FD0F876CCDF6CDA
  %50 = fmul double %40, %49
  %51 = fadd double %48, %50
  %52 = fmul double %41, 0xBFE5555555555555
  %53 = fadd double %52, %51
  %54 = fmul double %39, 0x3FC5369480174810
  %55 = fmul double %42, %54
  %56 = fadd double %55, %53
  %57 = fmul double %43, -4.000000e-01
  %58 = fadd double %57, %56
  %59 = fmul double %39, 0x3FB8BFAD401B2968
  %60 = fmul double %59, %44
  %61 = fadd double %60, %58
  %62 = fmul double %45, 0xBFCD41D41D41D41D
  %63 = fadd double %62, %61
  %64 = fmul double %39, 0x3FABD7A2E81E8E95
  %65 = fmul double %64, %46
  %66 = fadd double %65, %63
  br label %L39

L24:                                              ; preds = %L21
  %67 = fcmp ule double %0, 0x3FF64EB2E160837B
  br i1 %67, label %L31, label %L28

L28:                                              ; preds = %L24
  %phitmp = fcmp uge double %0, 0x3FF6F289EB9DF41F
  br i1 %phitmp, label %L31, label %if29

if29:                                             ; preds = %L28
  %68 = fadd double %0, 0xBFF6A09E667F3BCD
  %69 = fmul double %68, %68
  %70 = fmul double %68, %69
  %71 = fmul double %68, %70
  %72 = fmul double %68, %71
  %73 = fmul double %68, %72
  %74 = fmul double %68, %73
  %75 = fmul double %68, %74
  %76 = fmul double %0, -2.000000e-01
  %77 = fadd double %76, 0x3FE822CB17FF2EB9
  %78 = fmul double %69, 0x3FB4B01BCB6D037A
  %79 = fadd double %77, %78
  %80 = fmul double %70, 0xBFA0410410410410
  %81 = fadd double %79, %80
  %82 = fmul double %71, 0x3F89138689F88055
  %83 = fadd double %81, %82
  %84 = fmul double %72, 0xBF73187758E9EBB6
  %85 = fadd double %83, %84
  %86 = fmul double %73, 0x3F5CCE396609C3FE
  %87 = fadd double %85, %86
  %88 = fmul double %74, 0xBF4591175B628BB8
  %89 = fadd double %87, %88
  %90 = fmul double %75, 0x3F300D798C154B24
  %91 = fadd double %89, %90
  br label %L39

L31:                                              ; preds = %L28, %L24
  %92 = fcmp ult double %0, 0x3FF6F289EB9DF41F
  br i1 %92, label %L39, label %if32

if32:                                             ; preds = %L31
  %93 = fadd double %0, 1.000000e+00
  %94 = fadd double %0, -1.000000e+00
  %95 = fmul double %93, %94
  %96 = fmul double %95, %95
  %97 = fadd double %96, -1.000000e+00
  %98 = fcmp uge double %97, 0.000000e+00
  br i1 %98, label %pass34, label %fail33

fail33:                                           ; preds = %if32
  %99 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %99, i32 61)
  unreachable

pass34:                                           ; preds = %if32
  %100 = call double @llvm.sqrt.f64(double %97)
  %101 = fadd double %95, %100
  %102 = call double inttoptr (i64 13106763600 to double (double)*)(double inreg %101)
  %103 = fcmp ord double %102, 0.000000e+00
  %104 = fcmp uno double %101, 0.000000e+00
  %105 = or i1 %103, %104
  br i1 %105, label %pass36, label %fail35

fail35:                                           ; preds = %pass34
  %106 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %106, i32 61)
  unreachable

pass36:                                           ; preds = %pass34
  %107 = fadd double %95, -1.000000e+00
  %108 = fdiv double 1.000000e+00, %107
  %109 = fcmp uge double %108, 0.000000e+00
  br i1 %109, label %pass38, label %fail37

fail37:                                           ; preds = %pass36
  %110 = load %jl_value_t** @jl_domain_exception, align 8
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %110, i32 64)
  unreachable

pass38:                                           ; preds = %pass36
  %111 = fmul double %102, -1.000000e+00
  %112 = call double @llvm.sqrt.f64(double %108)
  %113 = fmul double %111, %112
  %114 = fadd double %113, %0
  %115 = fmul double %108, %114
  br label %L39

L39:                                              ; preds = %pass38, %L31, %if29, %if22, %pass19, %pass14
  %W.0 = phi double [ 0.000000e+00, %L31 ], [ %115, %pass38 ], [ %91, %if29 ], [ %66, %if22 ], [ %37, %pass19 ], [ %19, %pass14 ]
  ret double %W.0
}
